name: Continuous Integration
env:
  DOCKER_BUILDKIT: 1
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  generate-ref:
    name: Generate Ref
    runs-on: ubuntu-latest
    outputs:
      REF: ${{ steps.generate-ref.outputs.ref }}
    steps:
      - uses: actions/checkout@v4
      - id: generate-ref
        name: Generate Ref
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] ; then
            ref=$(php -r "echo str_replace('/', '-SLASH-', '${{ github.event.pull_request.head.ref }}');")
            echo "$ref"
            printf "::set-output name=ref::%s" $ref
            exit 0
          fi
          echo "${GITHUB_REF##*/}"
          echo "::set-output name=ref::${GITHUB_REF##*/}"
  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile
        uses: docker://hadolint/hadolint:latest-debian
        with:
          entrypoint: hadolint
          args: generate-comments/Dockerfile-build
  build-docker-image:
    name: Build Docker image
    needs:
      - generate-ref
      - lint-dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: mkdir ./docker-image/
      - name: Login to GitHub Container Registry
        if: github.actor != 'dependabot[bot]'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
          docker login ghcr.io \
            --username "${GITHUB_ACTOR}" \
            --password-stdin
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - run: docker version
      - run: docker images
        env:
          REF: ${{ needs.generate-ref.outputs.ref }}
      - run: docker build --platform=linux/arm64,linux/amd64 --output=type=registry --no-cache -t "$(echo "ghcr.io/${GITHUB_REPOSITORY}:${{ needs.generate-ref.outputs.ref }}" | tr '[:upper:]' '[:lower:]')" ./generate-comments/ -f generate-comments/Dockerfile-build --target=runtime
      - run: |
          printf "FROM %s" $(echo "ghcr.io/${GITHUB_REPOSITORY}:${{ needs.generate-ref.outputs.ref }}" | tr '[:upper:]' '[:lower:]') >> Dockerfile.tag
          docker build --platform=linux/arm64,linux/amd64 --output=type=registry --no-cache -f Dockerfile.tag -t $(echo "ghcr.io/${GITHUB_REPOSITORY}:sha-${GITHUB_SHA}" | tr '[:upper:]' '[:lower:]') .
      - run: docker images
  comment-composer-lock-diff:
    name: Comment composer.lock diff (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Default
            withDry:
              dryRun: yes
            with: {}
          - name: Working Directory without suffix
            withDry:
              dryRun: yes
              workingDirectory: generate-comments
            with:
              workingDirectory: generate-comments
          - name: Working Directory with suffix
            withDry:
              dryRun: yes
              workingDirectory: generate-comments/
            with:
              workingDirectory: generate-comments/
    needs:
      - build-docker-image
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if composer.lock has changed
        id: composer-lock-changed
        uses: tj-actions/changed-files@v46
        with:
          files: composer.lock
      - name: Download Images
        if: github.actor == 'dependabot[bot]'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: docker-image
          path: ./docker-image
      - run: docker load --input ./docker-image/image.tar
        if: github.actor == 'dependabot[bot]'
      - run: git branch
      - run: sed -i $(echo "s/main/sha-$GITHUB_SHA/g") action.yaml
      - name: Comment composer.lock diff
        if: github.actor != 'dependabot[bot]'
        uses: ./
        with: ${{ matrix.with }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Comment composer.lock diff
        id: composerdiff
        uses: ./
        with: ${{ matrix.withDry }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Show production table
        run: echo "${PRODUCTION}"
        env:
          PRODUCTION: ${{ steps.composerdiff.outputs.production }}
      - name: Show development table
        run: echo "${DEVELOPMENT}"
        env:
          DEVELOPMENT: ${{ steps.composerdiff.outputs.development }}
      - name: Assert Production Output
        if: steps.composer-lock-changed.outputs.any_changed == 'true' && ((steps.composerdiff.outputs.development == '' && steps.composerdiff.outputs.production != '') || (steps.composerdiff.outputs.development != '' && steps.composerdiff.outputs.production != ''))
        uses: nick-fields/assert-action@v2
        with:
          expected: "| Prod Packages"
          actual: ${{ steps.composerdiff.outputs.production }}
          comparison: startsWith
      - name: Assert Development Output
        if: steps.composer-lock-changed.outputs.any_changed == 'true' && ((steps.composerdiff.outputs.development != '' && steps.composerdiff.outputs.production == '') || (steps.composerdiff.outputs.development != '' && steps.composerdiff.outputs.production != ''))
        uses: nick-fields/assert-action@v2
        with:
          expected: "ðŸš§ Composer Development Dependency changes ðŸš§"
          actual: ${{ steps.composerdiff.outputs.development }}
          comparison: startsWith
